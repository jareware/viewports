@import "viewports";

$textColor: #333333;
$borderWidth: 2px;
$borderColor: #aaa;
$pegHeight: 10px;
$liTopPad: 0px;
$liBotPad: 50px;
$arrowSize: 7px;
$arrowColor: black;
$visuWidth: 500px;
$cursorWidth: 100px;
$cursorHeight: 30px;
$rangeMatchSpacing: 35px;

$maxWidth: 1280px; // TODO: Calculate this

* {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

body {
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
    font-size: 14px;
    line-height: 20px;
    color: #333333;
}

@mixin selected-1 {
    background-color: lighten($borderColor, 30%);
    color: $textColor;
}

#current-range-name {
    font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
    font-size: 14px;
    &::after {
        @each $range in range-names() {
            @include viewports(among $range) {
                content: "\"#{$range}\""
            }
        }
    }
}

#current-range-cursor {
    width: $visuWidth;
    height: $cursorHeight;
    position: relative;
    font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
    font-size: 14px;
    overflow: hidden;

    > div { // the moving part
        position: absolute;
        width: $cursorWidth;
        height: $cursorHeight;
        text-align: center;
        margin-left: $cursorWidth / -2;

        &::after { // the "pointer" triangle
            content: '';
            position: absolute;
            left: ($cursorWidth / 2) - $arrowSize;
            bottom: -$arrowSize;
            width: 0;
            height: 0;
            border-width: $arrowSize;
            border-color: transparent;
            border-style: solid;
            border-top: $arrowSize solid $arrowColor;
        }
    }
}

#current-range-list {
    margin: 0;
    padding: 0;
    overflow: hidden;
    position: relative;
    width: $visuWidth;

    li {
        float: left;
        height: $pegHeight;
        list-style-type: none;
        border-style: solid;
        border-color: $borderColor;
        border-width: $borderWidth 0 0 $borderWidth;
        margin: $liTopPad 0 $liBotPad 0;
        padding: $pegHeight 0 0 0;
        font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
        font-size: 14px;
        text-align: center;
        color: lighten($textColor, 50%);
        position: relative;

        > div {

            &:nth-child(1) {
                position: absolute;
                width: 100px;
                right: -50px;
                top: $pegHeight;
                font-size: 10px;
                color: lighten($textColor, 50%);
            }
            &:nth-child(2) {
                margin-top: 20px;
            }
        }

        &:nth-child(1) {
            @include viewports('tiny') {
                @include selected-1;
            }
        }
        &:nth-child(2) {
            @include viewports('small') {
                @include selected-1;
            }
        }
        &:nth-child(3) {
            @include viewports('medium') {
                @include selected-1;
            }
        }
        &:nth-child(4) {
            @include viewports('large') {
                @include selected-1;
            }
        }
    }
}

#matching-ranges {
    width: $visuWidth;
    position: relative;
    height: $rangeMatchSpacing * 4;

    > div {
        position: absolute;
        left: 0;
        border: $borderWidth solid $borderColor;
        border-top: 0px solid transparent;
        height: $pegHeight;
        padding-top: $pegHeight;
        color: lighten($textColor, 50%);
        font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
        font-size: 10px;
        white-space: nowrap;
        transition-property: left width;
        transition-duration: 500ms;
        transition-timing-function: ease-out;
    }

    .query-among   { top: $rangeMatchSpacing * 0; }
    .query-below   { top: $rangeMatchSpacing * 1; }
    .query-above   { top: $rangeMatchSpacing * 1; }
    .query-up-from { top: $rangeMatchSpacing * 2; }
    .query-up-to   { top: $rangeMatchSpacing * 3; }

    @each $queryType in 'below' 'up-to' 'among' 'up-from' 'above' {
        @each $range in range-names() {
            @include viewports($range) {
                .query-#{$queryType} {
                    $bounds: nth(resolve-query($queryType, $range), 1);
                    color: black;
                    @if $bounds == false { // query doesn't apply with this range -> hide range marker
                        display: none;
                    } @else if $bounds == true { // query always applies -> show 100%
                        left: 0;
                        width: 100%;
                    } @else { // query applies over a specific range
                        $left:  if(nth($bounds, 1), nth($bounds, 1), 0px);
                        $width: if(nth($bounds, 2), nth($bounds, 2) - $left, $maxWidth - $left);
                        width:  $width * 100% / $maxWidth;
                        left:   $left * 100% / $maxWidth;
                    }
                    &::after {
                        $title: if($queryType == 'among', '', $queryType + ' ');
                        content: "@include viewports(#{$title}\"#{$range}\")";
                    }
                }
            }
        }
    }
}

#match-table {
    width: $visuWidth;
    border-collapse: collapse;
    font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
    font-size: 11px;

    td, th {
        border: $borderWidth solid $borderColor;
        text-align: center;

        &:first-child {
            border-left: none;
            color: lighten($textColor, 50%);
            text-align: right;
        }
    }
    th {
        border-top: none;
        color: lighten($textColor, 50%);
    }


    tbody tr {
        @each $queryType in $VIEWPORTS_QUERY_TYPES {
            &.query-#{$queryType} {
                @each $range in range-names() {
                    td.range-#{$range} {
                        color: transparent; // hide the match text by default
                        @include viewports($queryType $range) {
                            color: $textColor; // but show it when the range matches
                        }
                    }
                }
            }
        }
    }
}
