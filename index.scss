@import "viewports";

$textColor: #333333;
$borderWidth: 2px;
$borderColor: #aaa;
$pegHeight: 10px;
$liTopPad: 0px;
$liBotPad: 50px;
$arrowSize: 7px;
$arrowColor: black;
$visuWidth: 500px;
$cursorWidth: 100px;
$cursorHeight: 30px;
$rangeMatchSpacing: 35px;

$maxWidth: nth(bounds-for-range(nth(range-names(), length(range-names()))), 1);
$scaleWidth: $maxWidth + $maxWidth / length(range-names());

* {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

body {
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
    font-size: 14px;
    line-height: 20px;
    color: #333333;
}

%monospace {
    font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
    font-size: 14px;
}

// Contains the name of the currently applying range
.current-range-name {
    @extend %monospace;
    &::after {
        @each $range in range-names() {
            @include viewports(among $range) {
                content: "\"#{$range}\""
            }
        }
    }
}

// Produces a vertical scale of defined ranges
ul.range-scale {
    margin: 0;
    padding: 0;
    overflow: hidden;
    position: relative;
    width: $visuWidth;

    li {
        @extend %monospace;
        float: left;
        height: $pegHeight;
        list-style-type: none;
        border-style: solid;
        border-color: $borderColor;
        border-width: $borderWidth 0 0 $borderWidth;
        margin: $liTopPad 0 $liBotPad 0;
        padding: $pegHeight 0 0 0;
        text-align: center;
        color: lighten($textColor, 50%);
        position: relative;
        display: none;

        &::before { // the "peg" with the pixel number
            position: absolute;
            width: 100px;
            left: -50px;
            top: $pegHeight;
            font-size: 10px;
        }
        &::after { // the name of the range
            color: black;
            position: relative;
        }

        @for $i from 1 to length(range-names()) + 1 { // use each successive <li> to show a range
            $rangeName: nth(range-names(), $i);

            &:nth-child(#{$i}) {
                $bounds: bounds-for-range($rangeName);
                $lbound: if(nth($bounds, 1) != false, nth($bounds, 1), 0);
                $ubound: if(nth($bounds, 2) != false, nth($bounds, 2), $scaleWidth);
                display: block;
                width: ($ubound - $lbound) / $scaleWidth * 100%;

                &::before { // the "peg" with the pixel number
                    display: none;
                    content: '#{if($lbound == 0, 0px, $lbound - 1px)}';

                    @if $i == 1 { // align the "0px" peg so it's visible
                        left: 0;
                        text-align: left;
                    }
                }
                &::after { // the name of the range
                    display: none;
                    content: '#{$rangeName}';
                }
            }
        }
    }

    &.with-range-names { // with this class, show range names
        li::after {
            display: block;
        }
    }

    &.with-pixel-counts { // with this class, show pixel counts
        li::before {
            display: block;
        }
    }

    &.with-range-names.with-pixel-counts { // adjust range name positioning so it won't collapse with pixel counts when both present
        li::after {
            top: 10px;
        }
    }
}
