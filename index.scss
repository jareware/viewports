/**
 * Oh, hello there!
 *
 * This file is needlessly complicated, mostly just because of me wanting to have fun with SASS & trying
 * to implement ALL functionality of the demo page in just CSS.  Also, the page styles can be recompiled to
 * reflect any legal $VIEWPORTS_CONFIG, and that also makes it a bit complex.  Anyway, just keep in mind:
 *
 * FOR THE LOVE OF GOD AND ALL THAT IS HOLY, DON'T TREAT THIS FILE AS A USAGE EXAMPLE.
 *
 * That is all. :)
 */

$VIEWPORTS_DEBUG: true;

@import "viewports";

$textColor: #333333;
$borderWidth: 2px;
$borderColor: #aaa;
$pegHeight: 10px;
$liBotPad: 50px;
$arrowSize: 7px;
$arrowColor: black;
$visuWidth: 500px;
$cursorWidth: 100px;
$cursorHeight: 30px;
$rangeMatchSpacing: 35px;
$highlightColor: #1AAFC4;
$rangeMatchColor: transparentize($highlightColor, 0.65);

$maxWidth: nth(bounds-for-range(nth(range-names(), length(range-names()))), 1);
$scaleWidth: $maxWidth + $maxWidth / length(range-names());

* {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

html {
    margin: 0;
    padding: 0;
    width: 100%;
    overflow-x: hidden;
}

body {
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
    font-size: 14px;
    line-height: 20px;
    color: #333333;
    margin: 0;
    padding: 0;
    width: 100%;
    position: relative;
    left: 50%;
    margin-left: -$visuWidth / 2;

    @media (max-width: #{$visuWidth + 20px}) { // undo the centering for small-enough viewports
        left: 10px;
        margin-left: 0;
    }
}

p {
    width: $visuWidth;
}

h1 {
    font-size: 50px;
    font-weight: 200;
    margin-bottom: 40px;
}

h1 + p {
    margin-top: 60px; // let <h2> push its intro paragraph a bit
}

h2 {
    margin: 60px 0 30px 0;
    font-weight: 200;
    font-size: 27px;
}

h2 + p {
    margin-bottom: 50px; // let <h2> grab its intro paragraph a bit
}

.emphasized {
    color: $highlightColor;
    font-weight: bold;
}

p.emphasized {
    border: 1px solid $highlightColor;
    border-radius: 10px;
    padding: 10px;
    background: #3EBFD1;
    background: lighten($highlightColor, 4%);
    color: white;
    font-weight: normal;
}

ul, li {
    margin: 0;
    padding: 0;
    list-style: none;
}

.instruction-downsize,
.instruction-resize {
    display: none;
}
@media (max-width: $maxWidth - 1px) {
    .instruction-resize {
        display: inline;
    }
}
@media (min-width: $maxWidth) {
    .instruction-downsize {
        display: inline;
    }
}

.debug-info-explanation {
    position: fixed;
    top: 60px;
    left: 0px;
    margin: 10px;
    padding: 10px 12px;
    color: black;
    font-size: 12px;
    background: lightgray;
    width: 210px;
    opacity: 0.75;
    text-align: justify;
    transition: opacity linear 1s;

    &::after {
        content: '';
        display: block;
        position: absolute;
        top: -20px;
        left: 20px;
        border: 10px solid transparent;
        border-bottom: 10px solid lightgray;
    }

    @media (max-width: 950px) {
        opacity: 0.15; // hide the info-box so it's not in the way of the main docs
    }
}

%monospace {
    font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
    font-size: 14px;
}

// Contains the name of the currently applying range
.current-range-name {
    @extend %monospace;
    &::after {
        @each $range in range-names() {
            @include viewports(among $range) {
                content: "#{$range}";
            }
        }
    }
}

// Produces a vertical scale of defined ranges
ul.range-scale {
    overflow: hidden;
    position: relative;
    width: $visuWidth;

    li {
        @extend %monospace;
        float: left;
        height: $pegHeight;
        list-style-type: none;
        border-style: solid;
        border-color: $borderColor;
        border-width: $borderWidth 0 0 $borderWidth;
        margin: 0 0 $liBotPad 0;
        padding: $pegHeight 0 0 0;
        text-align: center;
        color: lighten($textColor, 50%);
        position: relative;
        display: none;
        z-index: 1;

        &::before { // the "peg" with the pixel number
            position: absolute;
            width: 100px;
            left: -50px;
            top: $pegHeight;
            font-size: 10px;
        }
        &::after { // the name of the range
            position: relative;
        }

        @for $i from 1 to length(range-names()) + 1 { // use each successive <li> to show a range
            $rangeName: nth(range-names(), $i);

            &:nth-child(#{$i}) {
                $bounds: bounds-for-range($rangeName);
                $lbound: if(nth($bounds, 1) != false, nth($bounds, 1), 0);
                $ubound: if(nth($bounds, 2) != false, nth($bounds, 2), $scaleWidth);
                display: block;
                width: ($ubound - $lbound) / $scaleWidth * 100%;

                &::before { // the "peg" with the pixel number
                    display: none;
                    content: '#{if($lbound == 0, 0px, $lbound - 1px)}';

                    @if $i == 1 { // align the "0px" peg so it's visible
                        left: 0;
                        text-align: left;
                    }
                }
                &::after { // the name of the range
                    display: none;
                    content: '#{$rangeName}';
                }
            }
        }
    }

    &.with-range-names { // with this class, show range names
        li::after {
            display: block;
        }
    }

    &.with-pixel-counts { // with this class, show pixel counts
        li::before {
            display: block;
        }
    }

    &.with-range-names.with-pixel-counts { // adjust range name positioning so it won't collapse with pixel counts when both present
        li::after {
            top: 10px;
            color: $textColor;
        }
    }

    &.with-current-highlighted li {
        @for $i from 1 to length(range-names()) + 1 {
            $rangeName: nth(range-names(), $i);

            @include viewports(among $rangeName) {
                &:nth-child(#{$i}) {
                    &::after {
                        color: $textColor;
                    }
                }
            }
        }
    }
}

// Produces an arrow pointing to the currently matching range
.range-cursor {
    @extend %monospace;
    height: $cursorHeight;
    position: relative;
    overflow: hidden;

    > div { // the moving part
        left: $visuWidth / $scaleWidth * 100%;
        position: absolute;
        width: $cursorWidth;
        height: $cursorHeight;
        text-align: center;
        margin-left: $cursorWidth / -2;

        &::after { // the "pointer" triangle
            content: '';
            position: absolute;
            left: ($cursorWidth / 2) - $arrowSize;
            bottom: -$arrowSize;
            width: 0;
            height: 0;
            border-width: $arrowSize;
            border-color: transparent;
            border-style: solid;
            border-top: $arrowSize solid $arrowColor;
        }
    }
}

// Shared styling for the following .match-list
@mixin positioning-for-bounds($bounds) {
    @if $bounds == false { // query doesn't apply with this range -> hide range marker
        display: none;
    } @else if $bounds == true { // query always applies -> show 100%
        left: 0;
        width: 100%;
    } @else { // query applies over a specific range
        $left:  if(nth($bounds, 1), nth($bounds, 1), 0px);
        $width: if(nth($bounds, 2), nth($bounds, 2) - $left, $scaleWidth - $left);
        width:  $width * 100% / $scaleWidth;
        left:   $left * 100% / $scaleWidth;
    }
}

// Produces highlights for a preceding .range-scale, for the named query types
ul.match-list {
    width: $visuWidth;
    position: relative;
    margin-top: -$liBotPad - $pegHeight;
    margin-bottom: $liBotPad + $pegHeight * 2;

    li {
        background: $rangeMatchColor;
        position: absolute;
        height: $pegHeight;
    }

    // Query types that yield only 1 set of bounds can be combined
    @each $queryType in 'below' 'up-to' 'among' 'up-from' 'above' {
        @each $range in range-names() {
            @include viewports($range) {
                .query-#{$queryType} {
                    $bounds: nth(resolve-query($queryType, $range), 1);
                    @include positioning-for-bounds($bounds);
                }
            }
        }
    }

    // "not" queries yield (potentially) more bound tuples, so we need to iterate through them
    @each $range in range-names() {
        @include viewports($range) {
            $boundsList: resolve-query('not', $range);
            @for $i from 1 to length($boundsList) + 1 {
                .query-not:nth-child(#{$i}) {
                    $bounds: nth($boundsList, $i);
                    @include positioning-for-bounds($bounds);
                }
            }
        }
    }
}
