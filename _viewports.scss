$_viewport_config: (
    up-to  480px it-is "tiny",
    up-to  768px it-is "small",  // (portrait iPad width, for reference)
    up-to 1024px it-is "medium", // (landscape iPad width, for reference)
    beyond-that  it-is "large"
    );

//    What this configuration means is:
//
//    0px         480px       768px       1024px      >9000px
//    \__________/\__________/\__________/\____________...
//       "tiny"      "small"    "medium"      "large"
//       0-480       481-768    769-1024       1025->

@function bounds-for-range($namedRange) {
    @for $i from 1 to length($_viewport_config) + 1 { // for each config row
        $row: nth($_viewport_config, $i);
        @if (nth($row, 1) == 'up-to') { // standard range specification
            @if (nth($row, 4) == $namedRange) { // name matches
                @if ($i > 1) { // range with a lower neighbor
                    $prevRow: nth($_viewport_config, $i - 1);
                    @return (nth($prevRow, 2) + 1) nth($row, 2); // return with [lbound, ubound]
                } @else { // lowest range (e.g. from 0)
                    @return null nth($row, 2); // return with [null, ubound]
                }
            }
        } @else if (nth($row, 1) == 'beyond-that') { // uppermost range specification
            @if (nth($row, 3) == $namedRange) { // name matches
                $prevRow: nth($_viewport_config, $i - 1); // TODO: What if no lower neighbor? Edge-case..?
                @return (nth($prevRow, 2) + 1) null; // return with [lbound, null]
            }
        } @else { // invalid specification format
            @warn 'Invalid range specification format: #{$row}';
        }
    }
    @warn 'Invalid named range: #{$namedRange}';
}

@mixin viewports($queryConfig) {

    $DEBUG: true;
    $VALID_TYPES: 'up-to' 'up-from' 'below' 'above' 'among';
    $DEFAULT_TYPE: 'among';

    $queryType: nth($queryConfig, 1);

    @if (index($VALID_TYPES, $queryType) == false) { // ensure valid query type always present
        $queryConfig: join($DEFAULT_TYPE, $queryConfig);
    }

    @if ($DEBUG) { @debug '@mixin viewports() called, $queryConfig: <#{$queryConfig}>'; }

    $totalOutput: '';

    @for $i from 2 to length($queryConfig) + 1 { // for each named range

        $rangeName: nth($queryConfig, $i);
        $bounds: bounds-for-range($rangeName);

        @if ($DEBUG) { @debug '$rangeName: <#{$rangeName}>, $bounds: <#{$bounds}>'; }

        $currentOutput: '';

        @if (nth($bounds, 1) != null and nth($bounds, 2) != null) {
            $currentOutput: '(min-width: #{nth($bounds, 1)}) and (max-width: #{nth($bounds, 2)})';
        } @else if (nth($bounds, 1) == null and nth($bounds, 2) != null) {
            $currentOutput: '(max-width: #{nth($bounds, 2)})';
        } @else if (nth($bounds, 1) != null and nth($bounds, 2) == null) {
            $currentOutput: '(min-width: #{nth($bounds, 1)})';
        } @else {
            @warn 'Internal error: range is unbound at both ends';
        }

        @if ($i == 2) {
            $totalOutput: '#{$currentOutput}';
        } @else {
            $totalOutput: '#{$totalOutput}, #{$currentOutput}';
        }

    }

    @media #{$totalOutput} {
        @content;
    }

}
