$_viewport_config:
    up-to  480px it-is "tiny",
    up-to  768px it-is "small",  // (portrait iPad width, for reference)
    up-to 1024px it-is "medium", // (landscape iPad width, for reference)
    beyond-that  it-is "large"
    !default;

//    What this configuration means is:
//
//    0px         480px       768px       1024px      >9000px
//    \__________/\__________/\__________/\____________...
//       "tiny"      "small"    "medium"      "large"
//       <-480       481-768    769-1024       1025->

// Returns a boolean value indicating if the current $_viewport_config is properly formatted.
//
// Emits warnings accordingly, to help in debugging the config.
//
// @return boolean
//
@function validate-config() {
    @for $i from 1 to length($_viewport_config) + 1 { // for each config row
        $row: nth($_viewport_config, $i);
        $isStandardRange: length($row) == 4 and nth($row, 1) == 'up-to' and nth($row, 3) == 'it-is';
        $isUppermostRange: length($row) == 3 and nth($row, 1) == 'beyond-that' and nth($row, 2) == 'it-is';
        @if (not $isStandardRange and not $isUppermostRange) {
            @warn 'Invalid range specification format: #{$row}';
            @return false;
        } @else if ($isUppermostRange and $i == 1) {
            @warn 'Found a "beyond-that" specification with no lower bound';
            @return false;
        }
    }
    @return true;
}

// Returns the list of configured named ranges.
//
// @return list
//
@function range-names() {
    @if not validate-config() {
        @return null;
    }
    $return: ();
    @for $i from 1 to length($_viewport_config) + 1 { // for each config row
        $row: nth($_viewport_config, $i);
        @if nth($row, 1) == 'up-to' { // standard range specification
            $return: append($return, nth($row, 4));
        } @else if nth($row, 1) == 'beyond-that' { // uppermost range specification
            $return: append($return, nth($row, 3));
        }
    }
    @return $return;
}


// Returns a tuple representing the range in which the given $namedRange applies.
// For ranges that are unbound at either end, returns <false> for that end.
//
// @example "small" => [ 481px, 768px ]
// @example "large" => [ 1025px, false ]
//
// Emits a warning if the range isn't found.
//
// @return list
//
@function bounds-for-range($namedRange) {
    @if not validate-config() {
        @return null;
    }
    @for $i from 1 to length($_viewport_config) + 1 { // for each config row
        $row: nth($_viewport_config, $i);
        @if nth($row, 1) == 'up-to' { // standard range specification
            @if nth($row, 4) == $namedRange { // name matches
                @if $i > 1 { // range with a lower neighbor
                    $prevRow: nth($_viewport_config, $i - 1);
                    @return nth($prevRow, 2) + 1, nth($row, 2); // return with [lbound, ubound]
                } @else { // lowest range (e.g. from 0)
                    @return false, nth($row, 2); // return with [false, ubound]
                }
            }
        } @else if nth($row, 1) == 'beyond-that' { // uppermost range specification
            @if nth($row, 3) == $namedRange { // name matches
                $prevRow: nth($_viewport_config, $i - 1);
                @return nth($prevRow, 2) + 1, false; // return with [lbound, false]
            }
        }
    }
    @warn 'Invalid named range: #{$namedRange}';
}

// Returns a media query expression for the given bounds.
//
// @example [ 481px, 768px ] => "(min-width: 481px) and (max-width: 768px)"
// @example [ 481px, false ] => "(min-width: 481px)"
//
// Returns a boolean value for the two special cases, that is, <true> for a
// boundless range, and <false> for an impossible one:
//
// @example [ false, false ] => true
// @example false => false
//
// @return string | boolean
//
@function media-query-for-bounds($bounds) {
    @if ($bounds == false) {
        @return false; // range is impossible, and NEVER applies
    } @else if (nth($bounds, 1) != false and nth($bounds, 2) != false) {
        @return '(min-width: #{nth($bounds, 1)}) and (max-width: #{nth($bounds, 2)})';
    } @else if (nth($bounds, 1) == false and nth($bounds, 2) != false) {
        @return '(max-width: #{nth($bounds, 2)})';
    } @else if (nth($bounds, 1) != false and nth($bounds, 2) == false) {
        @return '(min-width: #{nth($bounds, 1)})';
    } @else {
        @return true; // range is unbound at both ends, and ALWAYS applies
    }
}

// Returns the given $list imploded into a string.
//
// @example list-to-string(12 34 56, ";") => "12;34;56"
//
@function list-to-string($list, $glueString: ', ') {
    $return: '';
    @for $i from 1 to length($list) + 1 {
        @if ($i == 1) {
            $return: "#{nth($list, $i)}";
        } @else {
            $return: "#{$return}#{$glueString}#{nth($list, $i)}";
        }
    }
    @return $return;
}

@mixin viewports($queryConfig) {

    $DEBUG: true;
    $VALID_TYPES: 'up-to' 'up-from' 'below' 'above' 'among' 'not';
    $DEFAULT_TYPE: 'among';

    $queryType: nth($queryConfig, 1);

    @if index($VALID_TYPES, $queryType) == false { // ensure valid query type always present
        $queryConfig: join($DEFAULT_TYPE, $queryConfig);
        $queryType: $DEFAULT_TYPE;
    }

    @if ($DEBUG) { @debug '@mixin viewports() called, $queryConfig: <#{$queryConfig}>'; }

    $mediaQueryList: ();

    @if ($queryType == 'among') {

        @for $i from 2 to length($queryConfig) + 1 { // for each named range

            $rangeName: nth($queryConfig, $i);
            $bounds: bounds-for-range($rangeName);
            $mediaQuery: media-query-for-bounds($bounds);
            $mediaQueryList: append($mediaQueryList, $mediaQuery);

            @if ($DEBUG) { @debug '$rangeName: <#{$rangeName}>, $bounds: <#{$bounds}>, $mediaQuery: <#{$mediaQuery}>'; }

        }

    } @else if ($queryType == 'not') {

        @each $rangeName in range-names() {

            @if index($queryConfig, $rangeName) == false {

                $bounds: bounds-for-range($rangeName);
                $mediaQuery: media-query-for-bounds($bounds);
                $mediaQueryList: append($mediaQueryList, $mediaQuery);

                @if ($DEBUG) { @debug '$rangeName: <#{$rangeName}>, $bounds: <#{$bounds}>, $mediaQuery: <#{$mediaQuery}>'; }

            }

        }

    } @else {

        @if (length($queryConfig) != 2) {
            @warn 'For query type "#{$queryType}", only a single range should be named';
        }

        $rangeName: nth($queryConfig, 2);
        $bounds: bounds-for-range($rangeName);

        @if ($queryType == 'up-to') {
            $bounds: join(false, nth($bounds, 2));
        } @else if ($queryType == 'up-from') {
            $bounds: join(nth($bounds, 1), false);
        } @else if ($queryType == 'below') {
            @if (nth($bounds, 1) == false) {
                $bounds: false; // impossible range selected
            } @else {
                $bounds: join(false, nth($bounds, 1) - 1px);
            }
        } @else if ($queryType == 'above') {
            @if (nth($bounds, 2) == false) {
                $bounds: false; // impossible range selected
            } @else {
                $bounds: join(nth($bounds, 2) + 1px, false);
            }
        } @else {
            @warn 'Internal error: Unknown query type "#{$queryType}"';
        }

        $mediaQueryList: media-query-for-bounds($bounds);

        @if ($DEBUG) { @debug '$bounds: <#{$bounds}>, $mediaQueryList: <#{$mediaQueryList}>'; }

    }

    @if ($mediaQueryList == true) { // @content should ALWAYS apply (e.g. a range unbound at both ends)
        @content;
    } @else if ($mediaQueryList == false) { // @content should NEVER apply (e.g. impossible range selection)
        // nothing
    } @else {
        $mediaQueryList: list-to-string($mediaQueryList, ', ');
        @media #{$mediaQueryList} {
            @content;
        }
    }

}
