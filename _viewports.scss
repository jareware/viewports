$_viewport_config: (
    up-to  480px it-is "tiny",
    up-to  768px it-is "small",  // (portrait iPad width, for reference)
    up-to 1024px it-is "medium", // (landscape iPad width, for reference)
    beyond-that  it-is "large"
    );

//    What this configuration means is:
//
//    0px         480px       768px       1024px      >9000px
//    \__________/\__________/\__________/\____________...
//       "tiny"      "small"    "medium"      "large"
//       <-480       481-768    769-1024       1025->

// Returns a tuple representing the range in which the given $namedRange applies.
// For ranges that are unbound at either end, returns <false> for that end.
//
// @example "small" => [ 481px, 768px ]
// @example "large" => [ 1025px, false ]
//
// Also implicitly checks the format of $_viewport_config, and emits warnings accordingly.
//
// @return list
//
@function bounds-for-range($namedRange) {
    @for $i from 1 to length($_viewport_config) + 1 { // for each config row
        $row: nth($_viewport_config, $i);
        @if (length($row) == 4 and nth($row, 1) == 'up-to' and nth($row, 3) == 'it-is') { // standard range specification
            @if (nth($row, 4) == $namedRange) { // name matches
                @if ($i > 1) { // range with a lower neighbor
                    $prevRow: nth($_viewport_config, $i - 1);
                    @return (nth($prevRow, 2) + 1), nth($row, 2); // return with [lbound, ubound]
                } @else { // lowest range (e.g. from 0)
                    @return false, nth($row, 2); // return with [false, ubound]
                }
            }
        } @else if (length($row) == 3 and nth($row, 1) == 'beyond-that' and nth($row, 2) == 'it-is') { // uppermost range specification
            @if (nth($row, 3) == $namedRange) { // name matches
                @if ($i > 1) { // range with a lower neighbor
                    $prevRow: nth($_viewport_config, $i - 1);
                    @return (nth($prevRow, 2) + 1), false; // return with [lbound, false]
                } @else {
                    @warn 'Found a "beyond-that" specification with no lower bound';
                }
            }
        } @else { // invalid specification format
            @warn 'Invalid range specification format: #{$row}';
        }
    }
    @warn 'Invalid named range: #{$namedRange}';
}

// Returns a media query expression for the given bounds.
//
// @example [ 481px, 768px ] => "(min-width: 481px) and (max-width: 768px)"
// @example [ 481px, false ] => "(min-width: 481px)"
//
// Returns a boolean value for the two special cases, that is, <true> for a
// boundless range, and <false> for an impossible one:
//
// @example [ false, false ] => true
// @example false => false
//
// @return string | boolean
//
@function media-query-for-bounds($bounds) {
    @if ($bounds == false) {
        @return false; // range is impossible, and NEVER applies
    } @else if (nth($bounds, 1) != false and nth($bounds, 2) != false) {
        @return '(min-width: #{nth($bounds, 1)}) and (max-width: #{nth($bounds, 2)})';
    } @else if (nth($bounds, 1) == false and nth($bounds, 2) != false) {
        @return '(max-width: #{nth($bounds, 2)})';
    } @else if (nth($bounds, 1) != false and nth($bounds, 2) == false) {
        @return '(min-width: #{nth($bounds, 1)})';
    } @else {
        @return true; // range is unbound at both ends, and ALWAYS applies
    }
}

@mixin viewports($queryConfig) {

    $DEBUG: true;
    $VALID_TYPES: 'up-to' 'up-from' 'below' 'above' 'among';
    $DEFAULT_TYPE: 'among';

    $queryType: nth($queryConfig, 1);

    @if (index($VALID_TYPES, $queryType) == false) { // ensure valid query type always present
        $queryConfig: join($DEFAULT_TYPE, $queryConfig);
        $queryType: $DEFAULT_TYPE;
    }

    @if ($DEBUG) { @debug '@mixin viewports() called, $queryConfig: <#{$queryConfig}>'; }

    $mediaQueryList: '';

    @if ($queryType == 'among') {

        @for $i from 2 to length($queryConfig) + 1 { // for each named range

            $rangeName: nth($queryConfig, $i);
            $bounds: bounds-for-range($rangeName);

            @if ($DEBUG) { @debug '$rangeName: <#{$rangeName}>, $bounds: <#{$bounds}>'; }

            // TODO: What if: a range unbound at both ends?

            @if ($i == 2) {
                $mediaQueryList: '#{media-query-for-bounds($bounds)}';
            } @else {
                $mediaQueryList: '#{$mediaQueryList}, #{media-query-for-bounds($bounds)}';
            }

        }

    } @else {

        @if (length($queryConfig) != 2) {
            @warn 'For query type "#{$queryType}", only a single range should be named';
        }

        $rangeName: nth($queryConfig, 2);
        $bounds: bounds-for-range($rangeName);

        @if ($queryType == 'up-to') {
            $bounds: join(false, nth($bounds, 2));
        } @else if ($queryType == 'up-from') {
            $bounds: join(nth($bounds, 1), false);
        } @else if ($queryType == 'below') {
            @if (nth($bounds, 1) == false) {
                $bounds: false; // impossible range selected
            } @else {
                $bounds: join(false, nth($bounds, 1) - 1px);
            }
        } @else if ($queryType == 'above') {
            @if (nth($bounds, 2) == false) {
                $bounds: false; // impossible range selected
            } @else {
                $bounds: join(nth($bounds, 2) + 1px, false);
            }
        } @else {
            @warn 'Internal error: Unknown query type "#{$queryType}"';
        }

        $mediaQueryList: media-query-for-bounds($bounds);

    }

    @if ($mediaQueryList == true) { // @content should ALWAYS apply (e.g. a range unbound at both ends)
        @content;
    } @else if ($mediaQueryList == false) { // @content should NEVER apply (e.g. impossible range selection)
        // nothing
    } @else {
        @media #{$mediaQueryList} {
            @content;
        }
    }

}
